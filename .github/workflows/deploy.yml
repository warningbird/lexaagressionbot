name: CI & Deploy

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write

jobs:
  test:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies (prod + dev if present)
        run: |
          set -euo pipefail
          for i in 1 2; do
            if pip install -r requirements.txt; then break; fi
            echo "retrying prod deps ($i)"; sleep 5;
          done
          if [ -f requirements-dev.txt ]; then
            for i in 1 2; do
              if pip install -r requirements-dev.txt; then break; fi
              echo "retrying dev deps ($i)"; sleep 5;
            done
          fi

      - name: Run tests with coverage (with 1 retry)
        run: |
          set -euo pipefail
          pytest -q --cov=. --cov-report=xml --cov-fail-under=70 || (echo "retry tests"; sleep 5; pytest -q --cov=. --cov-report=xml --cov-fail-under=70)
      - name: Upload coverage.xml
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: warn
          retention-days: 7

  lint:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install ruff
        run: pip install ruff
      - name: Run ruff
        run: ruff check .

  sast:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install bandit
        run: pip install bandit
      - name: Run bandit (JSON + SARIF)
        run: |
          bandit -r . -q -f json -o bandit.json || true
          bandit -r . -q -f sarif -o bandit.sarif || true
          # Ensure SARIF file exists even if bandit finds no issues
          if [ ! -f bandit.sarif ]; then
            echo '{"version": "2.1.0", "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "runs": [{"tool": {"driver": {"name": "bandit", "version": "1.7.9"}}, "results": []}]}' > bandit.sarif
          fi
      - name: Upload bandit artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bandit-reports
          path: |
            bandit.json
            bandit.sarif
          if-no-files-found: warn
          retention-days: 7
      - name: Upload SARIF to code scanning
        if: always()
        run: |
          if [ -f bandit.sarif ]; then
            echo "Uploading bandit.sarif to code scanning"
          else
            echo "bandit.sarif not found, skipping upload"
            exit 0
          fi
      - name: Upload SARIF to code scanning (bandit)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif

  sca:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install pip-audit
        run: pip install pip-audit
      - name: Run pip-audit (fail on findings; retry 1)
        run: |
          set -euo pipefail
          pip-audit -r requirements.txt -f json -o pip-audit.json --strict || (echo "retry pip-audit"; sleep 5; pip-audit -r requirements.txt -f json -o pip-audit.json --strict)
      - name: Upload SCA report
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: pip-audit.json
          if-no-files-found: error
          retention-days: 7

  secrets:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install gitleaks CLI
        run: |
          curl -sSfL https://raw.githubusercontent.com/gitleaks/gitleaks/master/install.sh | bash -s -- -b /usr/local/bin
      - name: Run gitleaks (with redact; JSON + SARIF)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gitleaks detect --source . --report-format json --report-path gitleaks.json --no-banner --redact || true
          gitleaks detect --source . --report-format sarif --report-path gitleaks.sarif --no-banner --redact || true
          # Ensure SARIF file exists even if gitleaks finds no secrets
          if [ ! -f gitleaks.sarif ]; then
            echo '{"version": "2.1.0", "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "runs": [{"tool": {"driver": {"name": "gitleaks", "version": "8.18.0"}}, "results": []}]}' > gitleaks.sarif
          fi
      - name: Upload gitleaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-reports
          path: |
            gitleaks.json
            gitleaks.sarif
          if-no-files-found: warn
          retention-days: 7
      - name: Check SARIF file exists (gitleaks)
        if: always()
        run: |
          if [ -f gitleaks.sarif ]; then
            echo "Uploading gitleaks.sarif to code scanning"
          else
            echo "gitleaks.sarif not found, skipping upload"
            exit 0
          fi
      - name: Upload SARIF to code scanning (gitleaks)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

  quality-assurance:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: [deploy]
    permissions:
      contents: read
      pull-requests: write
      statuses: write
    steps:
      - uses: actions/checkout@v4

      - name: Quality Gates Inventory (Bugeera)
        uses: warningbird/bugeera/.github/actions/quality-gates-inventory@master
        with:
          fail-on: policy
          output-dir: qg_artifacts
          upload-artifacts: 'true'
          artifact-name: qg_artifacts
          github-repo: ${{ github.repository }}
          openai-model: gpt-4o-mini
          github-token: ${{ secrets.GITHUB_TOKEN }}
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}

  deploy:
    timeout-minutes: 20
    needs: [test, lint, sast, sca, secrets]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ secrets.OPENAI_MODEL }}
        run: |
          flyctl secrets set BOT_TOKEN="$BOT_TOKEN" OPENAI_API_KEY="$OPENAI_API_KEY" OPENAI_MODEL="${OPENAI_MODEL:-gpt-4o-mini}"
          flyctl deploy --remote-only

